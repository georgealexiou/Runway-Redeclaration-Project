#+options: ':t *:t -:t ::t <:t H:5 \n:nil ^:t arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+options: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+title: Increment 3 Report
#+author: Jonathan Bartlett \\ George Alexiou \\ Odysseas Kalatzis \\ Manqi Dong \\ Liyu Su
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+latex_class: article
#+latex_class_options: [10pt]
#+latex_header_extra: \usepackage{pdfpages}
#+latex_header_extra: \usepackage{fullpage}
#+subtitle: COMP2211 SEG - Group 6
#+date: \today

* Design Artefacts
We updated the hierarchy for the GUI to reflect the following changes:
- Top Down and Side On view combined into a single view
- Sidebar became a menu bar are part of the main view
- The intermediary component wrapper was no longer needed
#+caption: Updated UI Hierarchy
#+attr_latex: :placement [H]
#+label: fig:updated-hierarchy
[[file:storyboards/UIHierachy.png]]
* Storyboards
Below are storyboards we have updated as a result of design changes. There is no storyboard for changing colour schemes as this functionality could be summed up in a scenario.

#+caption: Updated Runway View - Only topdown shown as the fundamental representation didn't change just the surroundings
#+attr_latex: :placement [H]
#+label: fig:updated-runway
[[file:storyboards/updated-runway-view.png]]

#+caption: Updated Component Wrapper
#+attr_latex: :placement [H]
#+label: fig:updated-wrapper
[[file:storyboards/component-wrapper.png]]

#+caption: Updated Obstacle View
#+attr_latex: :placement [H]
#+label: fig:update-obstacle-view
[[file:storyboards/updated-obstacle-view.png]]

#+caption: Updated Breakdown View
#+attr_latex: :placement [H]
#+label: fig:update-breakdown-view
[[file:storyboards/updated-breakdown-view.png]]

#+caption: Updated Airport View
#+attr_latex: :placement [H]
#+label: fig:update-airport-view
[[file:storyboards/updated-airport-view.png]]

* Design Decisions
It was decided that we should modify the views slightly in order to combat an issue with DPI scaling.
This resulted with a reasonable user experience across multiple scales but we feel that fundamental design changes would be the best case scenario for this issue, but due to the time constraints and our satisfaction with the user experience we did not attempt to do this.

We made the decision to remove the CLI functionality as we were constrained on time and it was always just a way of initially demonstrating the calculations.

We decided to omit importing/exporting multiple obstacles as it was not required and time was constrained.
* Scenarios and Test Output
** Scenarios
We created some new scenarios in this sprint and also modified some previous scenarios to reflect the design decisions from Sprint 2. This was based on feedback provided by out Sprint review meeting in which it was suggested we should update our design artefacts.

Most edits are to do with the change from a side panel to a menu bar.
*** Colour Schemes                                                      :new:
Chris is using the tool in the evening and is finding the brightness of the original colour scheme taxing on his eyes.
He selects the 'Inverts Colours' option from the 'View' menu on the top bar. 
The colours are inverted and apply to the entire application across all views.
*** Zooming and Panning                                                 :new:
Hallie wants to focus on a particular area of the Runway view.
She uses the scroll bar to zoom in on the area she is interested in and then drags with the mouse to pan to the correct region.
When she is finished she chooses to zoom out using the zoom slider at the bottom of the screen.
After zooming out she realises that the view is now off centre and double clicks to reset the view back to its original state.
*** Top Down - No Obstacle                                           :edited:
Chris starts the runway redeclaration tool and loads in 'Heathrow Airport'.
He is presented with a top-down view of the first runway in 'Heathrow' - '09L27R'.
There are dropdown menus showing the currently selected Runway and Threshold as well as the current obstacle.
An arrow in the top right updates to reflect the landing and takeoff direction when he changes logical runway.
The currently selected threshold should be highlighted with an orange box.
The original runway values should be represented by arrows, including a displaced threshold if one is present.
The runway centre line should be visible, as should the clearway and stopway at each end of the runway if applicable.
*** Top Down - Obstacle                                              :edited:
Upon selecting a previously added obstacle, it should appear on the runway in the expected location.
The recalculated values for the currently selected threshold should be displayed based on the obstacle.
Factors such as slope calculation, blast protection, strip end and runway end safety area should also be displayed.
All values should be labelled with their magnitude and type such as 'TORA - 3646m'.
Chris can select to change the currently selected logical runway in the top left.
Upon doing so, the values should all update to reflect the impact the obstacle has on this logical runway.
*** Side On View - No Obstacle                                       :edited:
Hallie chooses to view the side-on view by selecting 'Toggle View' from the top menu bar.
Each of the original parameters should be visible: TORA, TODA, ASDA and LDA. In addition to this, the displaced threshold should be shown.
Since there is no obstacle present, there should be no representation of the takeoff and landing slope.
The currently selected threshold should be highlighted so that it is clear to Hallie which logical runway she is focused on.
*** Side On View - Obstacle                                          :edited:
After Hallie adds an obstacle to the current runway she will see a shape appear on the runway in the expected location.
The recalculated values should appear on the visualisation, and where necessary be broken down into the factors that cause the values to change such as the 'blast protection', 'strip end' and 'slope calculation'.
If she chooses the change the logical runway the values will update accordingly.
*** Airport Config - Editing an existing Airport                     :edited:
Chris wants to change some details about a previously defined runway. 
He clicks the 'Edit' button from the Airport section of the menu bar and is presented with the airport configuration view with the details of the runway loaded in.
He is able to change all of the values, including the deletion of a runway.
Upon completing the changes he is able to save the runway for the current session or export it to the file it was loaded from.
*** Airport Config - Creating a new Airport                          :edited:
Jules wants to configure a new airport on the tool so that she can roll out the software in other airports.
She chooses the 'Create Airport' option from the top menu bar.
She is able to enter a name and select a number of runways. The number of runways must be at least 1.
At this point, she sees that the 'Save' and 'Export' buttons are greyed out since the airport is incomplete.
She enters a name and selects to have 2 runways.
A stacked list of Runways appears with 'Runway 1 -' and 'Runway 2 -' as their names. She clicks 'Runway 1 -' and the runway configuration opens. 
She can now select the number of logical runways/thresholds from a number picker that limits her to between 1 and 3.
For each logical runway, a form appears allowing her to choose the 'Heading', 'Position' and Runway Parameters for each runway and optionally the 'Displaced Threshold'.
She completes the values for one of the logical runways but moves on to the other runway before completing the other.
She sees a message next to 'Runway 1 -' that tells her there are incomplete logical runways.
She completes all of the required fields and sees that the 'Save' and 'Export' buttons are now available.
*** Viewing a calculation breakdown                                  :edited:
Chris wants to view the breakdown of calculations for his current sessions so that he can compare them with his paper calculations to further his training.
He has added an obstacle and sees the option to select 'View Calculations' from the top menu bar.
Upon clicking this, he is presented with breakdowns for all of the logical runways.
He chooses to limit this to just one as he is only concerned with '09R' for now. The drop-down list at the top of the view allows him to select this logical runway. 
The original and recalculated values are shown for each of the runway parameters.
Each of the parameters is shown below this with each of the factors used to calculate it displayed.

*** Obstacle Config - Loading an existing Obstacle                   :edited:
Chris wants to load a predefined obstacle to help in his understanding of the program's function. He clicks the 'Load Obstacle' button from the top menu bar. 
He selects the XML file corresponding to the predefined obstacle.
The 'Load an Obstacle' screen (variation of Create an Obstacle) is shown with predefined data.
He is asked to confirm and edit the data before continuing.
Upon completing the fields he can press 'Save' and the obstacle will be available in the current session.
*** Main View Wrapper                                                :edited:
Hallie starts the application and is greeted with a splash screen that prompts her to load an airport to begin.
In the top menu bar the only options she has are to create or load an airport.
She chooses one of these options and sees that the menu items update according the view she is on.
She has the option to return to the runway view or toggle the colour scheme from the menu bar.
** Manual Testing
#+begin_export latex
\includepdf[pages=-, width=\textwidth]{testing.pdf}
#+end_export
** Unit Testing
Some minor modifications were made to tests to accommodate for the removal of length and width from obstacles.
We continued to carry out regression testing through continuous integration and all tests passed.
#+caption: Evidence of regression testing
#+attr_latex: :placement [H]
#+label: fig:evidence-of-regression-tests
[[file:unit-test.png]]
* Sprint Overview
** Our Definition of Done
We define a task as being done when the scenarios corresponding to the task are able to be completed without error.
A task can be marked as done without all user stories associated with it being completed as long as the scenarios for the task pass. A user story is regarded as done when all tasks associated with it are marked as done.

We included some tasks in this sprint that were slightly open ended - such as the Bug Fixing task. Tasks like these evolved into smaller tasks with associated scenarios. We then classified the bug fixing task as done when all of the sub tasks were completed and all tests for the entire application were passing.
** User Stories Met
*** Deferred from the previous sprint
- As a <CAA Rep> I want <the system to be configurable> so that I can <promote it to all UK airports>.
- As a <MOCT> I want to <export and import data to XML files> so that I can <re-create scenarios and share configurations>.
*** New this sprint  
- As a <MOCT> I want <to zoom and pan views of the runway> so that I can <focus on specific areas>.
- As a <MOCT> I want to <change the colour scheme of the system> so that I can <use it at different times of the day and show my colourblind colleagues>.
- As a <MOCT> I want to <print out the results of simulations in a textual format> so that I can <keep records of previous simulations>.
- As a <MOCT> I want to <export displays as images> so that I can <keep clear records and share with other interested parties>.
** Tasks Not Completed
- CLI Improvements: See design decisions
- Importing/Exporting Multiple Obstacles: See design decisions
** Burndown Chart
#+caption: Burndown Chart for Sprint 3
#+attr_latex: :placement [H]
#+label: fig:burndown-chart
[[file:burndown.png]]
